/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { InternshipService } from "../internship.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { InternshipCreateInput } from "./InternshipCreateInput";
import { Internship } from "./Internship";
import { InternshipFindManyArgs } from "./InternshipFindManyArgs";
import { InternshipWhereUniqueInput } from "./InternshipWhereUniqueInput";
import { InternshipUpdateInput } from "./InternshipUpdateInput";
import { ApplicationFindManyArgs } from "../../application/base/ApplicationFindManyArgs";
import { Application } from "../../application/base/Application";
import { ApplicationWhereUniqueInput } from "../../application/base/ApplicationWhereUniqueInput";
import { JobSeekerFindManyArgs } from "../../jobSeeker/base/JobSeekerFindManyArgs";
import { JobSeeker } from "../../jobSeeker/base/JobSeeker";
import { JobSeekerWhereUniqueInput } from "../../jobSeeker/base/JobSeekerWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class InternshipControllerBase {
  constructor(
    protected readonly service: InternshipService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Internship })
  @nestAccessControl.UseRoles({
    resource: "Internship",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createInternship(
    @common.Body() data: InternshipCreateInput
  ): Promise<Internship> {
    return await this.service.createInternship({
      data: {
        ...data,

        employer: data.employer
          ? {
              connect: data.employer,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        duration: true,

        employer: {
          select: {
            id: true,
          },
        },

        employerAssociationForInternship: true,
        employerForInternship: true,
        id: true,
        location: true,
        stipend: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Internship] })
  @ApiNestedQuery(InternshipFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Internship",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async internships(@common.Req() request: Request): Promise<Internship[]> {
    const args = plainToClass(InternshipFindManyArgs, request.query);
    return this.service.internships({
      ...args,
      select: {
        createdAt: true,
        description: true,
        duration: true,

        employer: {
          select: {
            id: true,
          },
        },

        employerAssociationForInternship: true,
        employerForInternship: true,
        id: true,
        location: true,
        stipend: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Internship })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Internship",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async internship(
    @common.Param() params: InternshipWhereUniqueInput
  ): Promise<Internship | null> {
    const result = await this.service.internship({
      where: params,
      select: {
        createdAt: true,
        description: true,
        duration: true,

        employer: {
          select: {
            id: true,
          },
        },

        employerAssociationForInternship: true,
        employerForInternship: true,
        id: true,
        location: true,
        stipend: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Internship })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Internship",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateInternship(
    @common.Param() params: InternshipWhereUniqueInput,
    @common.Body() data: InternshipUpdateInput
  ): Promise<Internship | null> {
    try {
      return await this.service.updateInternship({
        where: params,
        data: {
          ...data,

          employer: data.employer
            ? {
                connect: data.employer,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          duration: true,

          employer: {
            select: {
              id: true,
            },
          },

          employerAssociationForInternship: true,
          employerForInternship: true,
          id: true,
          location: true,
          stipend: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Internship })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Internship",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteInternship(
    @common.Param() params: InternshipWhereUniqueInput
  ): Promise<Internship | null> {
    try {
      return await this.service.deleteInternship({
        where: params,
        select: {
          createdAt: true,
          description: true,
          duration: true,

          employer: {
            select: {
              id: true,
            },
          },

          employerAssociationForInternship: true,
          employerForInternship: true,
          id: true,
          location: true,
          stipend: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/applications")
  @ApiNestedQuery(ApplicationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "read",
    possession: "any",
  })
  async findApplications(
    @common.Req() request: Request,
    @common.Param() params: InternshipWhereUniqueInput
  ): Promise<Application[]> {
    const query = plainToClass(ApplicationFindManyArgs, request.query);
    const results = await this.service.findApplications(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        internship: {
          select: {
            id: true,
          },
        },

        job: {
          select: {
            id: true,
          },
        },

        status: true,
        submissionDate: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/applications")
  @nestAccessControl.UseRoles({
    resource: "Internship",
    action: "update",
    possession: "any",
  })
  async connectApplications(
    @common.Param() params: InternshipWhereUniqueInput,
    @common.Body() body: ApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applications: {
        connect: body,
      },
    };
    await this.service.updateInternship({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/applications")
  @nestAccessControl.UseRoles({
    resource: "Internship",
    action: "update",
    possession: "any",
  })
  async updateApplications(
    @common.Param() params: InternshipWhereUniqueInput,
    @common.Body() body: ApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applications: {
        set: body,
      },
    };
    await this.service.updateInternship({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/applications")
  @nestAccessControl.UseRoles({
    resource: "Internship",
    action: "update",
    possession: "any",
  })
  async disconnectApplications(
    @common.Param() params: InternshipWhereUniqueInput,
    @common.Body() body: ApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applications: {
        disconnect: body,
      },
    };
    await this.service.updateInternship({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/jobSeekers")
  @ApiNestedQuery(JobSeekerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "JobSeeker",
    action: "read",
    possession: "any",
  })
  async findJobSeekers(
    @common.Req() request: Request,
    @common.Param() params: InternshipWhereUniqueInput
  ): Promise<JobSeeker[]> {
    const query = plainToClass(JobSeekerFindManyArgs, request.query);
    const results = await this.service.findJobSeekers(params.id, {
      ...query,
      select: {
        createdAt: true,
        education: true,
        id: true,

        internship: {
          select: {
            id: true,
          },
        },

        job: {
          select: {
            id: true,
          },
        },

        resume: true,
        skillSet: true,
        skills: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/jobSeekers")
  @nestAccessControl.UseRoles({
    resource: "Internship",
    action: "update",
    possession: "any",
  })
  async connectJobSeekers(
    @common.Param() params: InternshipWhereUniqueInput,
    @common.Body() body: JobSeekerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      jobSeekers: {
        connect: body,
      },
    };
    await this.service.updateInternship({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/jobSeekers")
  @nestAccessControl.UseRoles({
    resource: "Internship",
    action: "update",
    possession: "any",
  })
  async updateJobSeekers(
    @common.Param() params: InternshipWhereUniqueInput,
    @common.Body() body: JobSeekerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      jobSeekers: {
        set: body,
      },
    };
    await this.service.updateInternship({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/jobSeekers")
  @nestAccessControl.UseRoles({
    resource: "Internship",
    action: "update",
    possession: "any",
  })
  async disconnectJobSeekers(
    @common.Param() params: InternshipWhereUniqueInput,
    @common.Body() body: JobSeekerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      jobSeekers: {
        disconnect: body,
      },
    };
    await this.service.updateInternship({
      where: params,
      data,
      select: { id: true },
    });
  }
}
